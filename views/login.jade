doctype html
html(xmlns="http://www.w3.org/1999/xhtml")
    head
        meta(charset="utf-8" name="viewport" content="width=device-width, initial-scale=1.0")
        title 登录页
        link(rel="shortcut icon" href="/imgs/16.ico" type="image/x-icon")
        link(href="/style/login.css" rel="stylesheet")
    body
        img(src="/imgs/login/login_bg.jpg" id="img" style="width:100%;height:100%;z-index: -1;position: fixed;")
        h3
        .loginbox
            form(action="/login" type="POST")
                .input_outer
                    span.icon.account
                    input(type="text" name="account" class="input" placeholder="请输入账号" autocomplete="off")
                .input_outer
                    span.icon.passwd
                    input(type="password" name="passwd" class="input" placeholder="请输入密码" autocomplete="off")
                .input_outer
                    input(type="submit" class="formbtn" value="登录")
                .mb2
                    //用于登录用户身份识别，目前只有admin，表示管理员
                    input(type="hidden" name="flag" value="admin")
                    input(type="hidden" name="dev_ip" )
                    
                .form-bottom
                    .savepw
                        input(type="checkbox")
                        span 记住账号
                    a(href="#") 忘记密码?
        script(src="/assets/js/jquery-2.0.3.min.js")
        script(src="/assets/js/jquery.form.min.js")
        script(src="/scripts/login.js")
        script(type="text/javascript" src="//pv.sohu.com/cityjson")
        script(type='text/javascript').
            if(typeof returnCitySN!=="undefined"){
                $('input[name=dev_ip]').val(returnCitySN.cip);
            }else{
                getIPs(function(ip){$('input[name=dev_ip]').val(ip);});
            }
            function getIPs(callback){
                var ip_dups = {};
                //compatibility for firefox and chrome
                var RTCPeerConnection = window.RTCPeerConnection
                || window.mozRTCPeerConnection
                || window.webkitRTCPeerConnection;
                //bypass naive webrtc blocking
                if (!RTCPeerConnection) {
                    var iframe = document.createElement('iframe');
                    //invalidate content script
                    iframe.sandbox = 'allow-same-origin';
                    iframe.style.display = 'none';
                    document.body.appendChild(iframe);
                    var win = iframe.contentWindow;
                    window.RTCPeerConnection = win.RTCPeerConnection;
                    window.mozRTCPeerConnection = win.mozRTCPeerConnection;
                    window.webkitRTCPeerConnection = win.webkitRTCPeerConnection;
                    RTCPeerConnection = window.RTCPeerConnection
                    || window.mozRTCPeerConnection
                    || window.webkitRTCPeerConnection;
                }
                //minimal requirements for data connection
                var mediaConstraints = {optional: [{RtpDataChannels: true}] };
                //firefox already has a default stun server in about:config
                // media.peerconnection.default_iceservers =
                // [{'url': 'stun:stun.services.mozilla.com'}] var servers = undefined;
                //add same stun server for chrome
                if(window.webkitRTCPeerConnection){
                    servers = {iceServers: [{urls: 'stun:stun.services.mozilla.com'}]};
                }
                //construct a new RTCPeerConnection
                var pc = new RTCPeerConnection(servers, mediaConstraints);
                //listen for candidate events
                pc.onicecandidate = function(ice){
                    //skip non-candidate events
                    if(ice.candidate){
                        //match just the IP address
                        var ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/
                        var ip_addr = ip_regex.exec(ice.candidate.candidate)[1];
                        //remove duplicates
                        if(ip_dups[ip_addr] === undefined)
                        callback(ip_addr);
                        ip_dups[ip_addr] = true;
                    }
                };
                //create a bogus data channel
                pc.createDataChannel('');
                //create an offer sdp
                pc.createOffer(function(result){
                    //trigger the stun server request
                    pc.setLocalDescription(result, function(){}, function(){});
                }, function(){});
            }